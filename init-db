#!/usr/bin/python

from abc import ABC, abstractmethod
import argparse
import base64
import errno
import json
import logging
import os
import re
import shutil
import sys
import traceback
import urllib.request
import yaml

TARGET_SCRIPT_NAME = "dbinit.runner"

ENV_INIT_DB_CONF = "INIT_DB_CONF"
ENV_INIT_DB_TYPE = "INIT_DB_TYPE"
ENV_INIT_DB_STORE = "INIT_DB_STORE"
ENV_INIT_DB_SECRETS = "INIT_DB_SECRETS"
ENV_INIT_DB_SHELL_SOURCES = "INIT_DB_SHELL_SOURCES"
ENV_INIT_DB_SHELL = "INIT_DB_SHELL"

parser = argparse.ArgumentParser(description="Database Initialization Script Generator")
parser.add_argument("config", metavar="config", action="store", help=f"The configuration to use (if not given, it will be read from the{ENV_INIT_DB_CONF} environment variable)", type=str, nargs="?")
parser.add_argument("--db", metavar="db", action="store", help=f"The type of database to render the scripts for (if not given, it will be read from the{ENV_INIT_DB_TYPE} environment variable)", type=str, nargs=1)
parser.add_argument("--store", metavar="store", action="store", help=f"The directory into which the script will be rendered (if not given, it will be read from the{ENV_INIT_DB_STORE} environment variable)", type=str, nargs=1)
parser.add_argument("--secrets", metavar="secrets", action="store", help=f"The directory under which all required secrets may be found (if not given, it will be read from the{ENV_INIT_DB_SECRETS} environment variable)", type=str, nargs=1)
parser.add_argument("--shell", action="store_true", help=f"When set, causes a small shellscript to be output which will run the generated script (if not given, it will be read from the {ENV_INIT_DB_SHELL} environment variable)", default=False)
parser.add_argument("--shell-sources", metavar="shell_sources", action="store", help=f"The directory under which all script templates are kept (ignored when --shell is not given, if not given, it will be read from the {ENV_INIT_DB_SHELL_SOURCES} environment variable)", type=str, nargs=1)

args = parser.parse_args()

logging.basicConfig(level=logging.INFO, format = '%(asctime)s - %(levelname)s - %(message)s')

def fail(msg):
	logging.error(msg)
	exit(1)

if args.config:
	# If the parameter is given, use it
	source_file = args.config
	if source_file == "-":
		source_file = sys.stdin
		source_file_is_file = False
	else:
		source_file_is_file = True
elif ENV_INIT_DB_CONF in os.environ:
	source_file = os.environ[ENV_INIT_DB_CONF]
	# Check if this points to a file ...
	source_file_is_file = (os.path.exists(source_file) and os.path.isfile(source_file))
else:
	logging.error("Failed to get the configuration from parameters or the environment")
	parser.print_help()
	exit(1)

INIT_DB_STORE = "/dbinit"
if args.store:
	INIT_DB_STORE = args.store[0]
elif ENV_INIT_DB_STORE in os.environ:
	INIT_DB_STORE = os.environ[ENV_INIT_DB_STORE]
logging.info(f"Using init store location at [{INIT_DB_STORE}]")

INIT_DB_SECRETS = "/dbsecrets"
if args.secrets:
	INIT_DB_SECRETS = args.secrets[0]
elif ENV_INIT_DB_SECRETS in os.environ:
	INIT_DB_SECRETS = os.environ[ENV_INIT_DB_SECRETS]
logging.info(f"Using secrets location at [{INIT_DB_SECRETS}]")

INIT_DB_TYPE = None
if args.db:
	INIT_DB_TYPE = args.db[0]
elif ENV_INIT_DB_TYPE in os.environ:
	INIT_DB_TYPE = os.environ[ENV_INIT_DB_TYPE]

if not INIT_DB_TYPE:
	logging.error("No DB type has been specified, cannot continue")
	parser.print_help()
	exit(1)

INIT_DB_SHELL = False
if args.shell:
	INIT_DB_SHELL = args.shell
elif ENV_INIT_DB_SHELL in os.environ:
	INIT_DB_SHELL = bool(os.environ[ENV_INIT_DB_SHELL])
if INIT_DB_SHELL:
	logging.info(f"Will output a shellscript to run the SQL script")

	INIT_DB_SHELL_SOURCES = "/dbscripts"
	if args.shell_sources:
		INIT_DB_SHELL_SOURCES = args.shell_sources[0]
	elif ENV_INIT_DB_SHELL_SOURCES in os.environ:
		INIT_DB_SHELL_SOURCES = os.environ[ENV_INIT_DB_SHELL_SOURCES]
	logging.info(f"Using shell script sources location at [{INIT_DB_SHELL_SOURCES}]")

KEY_SECRET_KEY = "secretKey"
KEY_USER_HOSTS = "hosts"
KEY_DB_CHARSET = "charset"
KEY_DB_COLLATE = "collate"
KEY_DB_COMMENT = "comment"
KEY_DB_PRIVILEGES = "privileges"

class DBWrapper(object):

	def __init__(self, aliases, adminUsername):
		if adminUsername is None:
			fail("Must provide the name for the admin user")
		self.adminUsername = str(adminUsername).lower()
		if not re.match(r"^[a-zA-Z_][a-zA-Z_0-9]*$", adminUsername):
			fail(f"The admin username is not valid: [{adminUsername}]")

		self.__aliases = [a.lower() for a in aliases]
		if not (self.__aliases):
			fail("Must provide at least one alias for the database")

		self.__output = None

	def __enter__(self):
		self.open()
		return self

	def __exit__(self, exc_type, exc_value, traceback):
		try:
			self.close()
		finally:
			if exc_type and exc_value:
				try:
					os.remove(self.__path)
				except:
					pass

	def open(self):
		if self.__output:
			raise Exception("The output stream is already open")

		self.__path = f"{INIT_DB_STORE}/000-{self.__aliases[0]}-database-init-script.sql"
		try:
			self.__output = open(self.__path, "wt")
			logging.info(f"Opened the output file at [{self.__path}]")
		except Exception as e:
			fail(f"Failed to create the target file at [{self.__path}]:\n{traceback.format_exc()}")

	def getPath(self):
		return self.__path

	def output(self, string):
		# Write out to the output file
		print(f"OUT: {string}")
		print(string, file=self.__output)

	def getName(self):
		return self.__aliases[0]

	def getAdminUsername(self):
		return self.adminUsername

	def isCompatible(self, candidates):
		if len(candidates) < 1:
			return True

		for c in candidates:
			if str(c).lower() in self.__aliases:
				return True
		return False

	@abstractmethod
	def renderAdminPassword(self, adminSpec):
		pass

	@abstractmethod
	def renderUserSQL(self, userName, userSpec):
		pass

	@abstractmethod
	def renderDatabaseSQL(self, dbName, dbSpec):
		pass

	@abstractmethod
	def renderDatabaseSchemaSQL(self, dbName, schemaName, schemaSpec):
		pass

	@abstractmethod
	def renderQuerySQL(self, db, user, query):
		pass

	def close(self):
		if not self.__output:
			return
		try:
			logging.info(f"Closing the output file at [{self.__path}]")
			self.__output.close()
		finally:
			self.__output = None

class PSQL_Wrapper(DBWrapper):

	def __init__(self):
		super().__init__([ "postgres", "psql", "postgresql" ], "postgres")

	def __quoteUser(self, user):
		user = user.replace('"', '""')
		return f"\"{user}\""

	def renderAdminPassword(self, adminSpec):
		if "password" not in adminSpec:
			return
		password = getSecretPassword(adminSpec["password"])
		self.output("")
		self.output(f"-- BEGIN: set the root password to [{password}]")
		self.output(f"ALTER USER postgres WITH PASSWORD '{password}';")
		self.output(f"-- END: set the root password")

	def renderUserSQL(self, userName, userSpec):
		if "password" in userSpec:
			password = getSecretPassword(userSpec["password"])
		else:
			password = userName

		roles = []
		if "roles" in userSpec:
			roles = userSpec[roles]
			if type(roles) == str:
				# Split using commas
				roles = roles.split(",")
			elif type(roles) == list:
				roles = [str(s) for s in roles]
			elif type(roles) == dict:
				roles = [str(s) for s in roles.values()]

		# Clean up the roles
		roles = [s.strip().upper() for s in roles]

		# Remove the "password" role, if present
		roles = list(filter(lambda r: r.upper().find("PASSWORD") < 0, roles))

		# Pre-pend the password role with the value we want
		roles = [f"PASSWORD '{password}'"] + roles

		userName = userName.replace('"', '""')
		self.output("")
		self.output(f"-- BEGIN: create the {userName} user")
		self.output(f"DROP USER IF EXISTS \"{userName}\";")
		self.output(f"CREATE USER \"{userName}\" {' '.join(roles)};")
		self.output(f"-- END: creation of {userName} user")

	def renderDatabaseSQL(self, dbName, dbSpec):
		forceFlag = ""
		if ("force" in dbSpec) and (bool(dbSpec["force"])):
			forceFlag = "FORCE"

		self.output("")
		self.output(f"-- BEGIN: create the {dbName} database")
		dbName = dbName.replace('"', '""')
		self.output(f"DROP DATABASE IF EXISTS \"{dbName}\" {forceFlag};")

		owner = None
		ownerSpec = ""
		if ("owner" in dbSpec) and (dbSpec["owner"]):
			owner = dbSpec["owner"]
			if type(owner) != str:
				fail(f"The owner clause for database {dbName} must be a string with the owner's name ({type(owner)})")
			ownerSpec = f"OWNER \"{owner}\""

		flagSpec = []
		if ("flags" in dbSpec) and (dbSpec["flags"]):
			flags = dbSpec["flags"]
			if type(flags) == str:
				# Comma-separated values
				flagSpec = [s.strip() for s in flags.split(",")]
			elif type(flags) == list:
				# Independent values
				flagSpec = [str(s).strip() for s in flags]
			elif type(flags) == map:
				# Key-value-pairs
				for k, v in flags.items():
					flagSpec += f"{k.upper()} = {v.upper()}"

		flagSpec = list(filter(lambda r: r.upper().find("OWNER") < 0, flagSpec))

		self.output(f"CREATE DATABASE \"{dbName}\" {ownerSpec} {' '.join(flagSpec)};")

		if KEY_DB_PRIVILEGES in dbSpec:
			privileges = dbSpec[KEY_DB_PRIVILEGES]
			if privileges:
				for u, p in privileges.items():
					u = self.__quoteUser(str(u))
					self.output("GRANT")
					comma = ","
					# Take a shortcut
					if "*" in p:
						p = ["ALL"]
					i = 0
					m = len(p)
					for pv in p:
						i += 1
						if (i >= m):
							comma = ""
						self.output(f"\t{pv}{comma}")
					self.output(f"ON DATABASE \"{dbName}\" TO {u};")

		# We do this last in case specific privileges were granted above
		if owner:
			self.output(f"GRANT ALL ON DATABASE \"{dbName}\" TO {owner} WITH GRANT OPTION;")

		self.output(f"-- END: creation of the database {dbName}")

	def renderDatabaseSchemaSQL(self, dbName, schemaName, schemaSpec):
		self.output("")
		self.output(f"-- BEGIN: create the {dbName}.{schemaName} schema")
		dbName = dbName.replace('"', '""')
		schemaName = schemaName.replace('"', '""')
		self.output(f"\c \"{dbName}\"")
		self.output(f"CREATE SCHEMA IF NOT EXISTS \"{schemaName}\";")
		self.output(f"-- END: creation of the {dbName}.{schemaName} schema")

	def renderQuerySQL(self, db, user, query):
		dbLabel = db
		if not db:
			dbLabel = "<current-database>"
		userLabel = user
		if not user:
			userLabel = "<current-user>"
		self.output(f"-- BEGIN: run query on {dbLabel} as {userLabel}")

		if user:
			user = user.replace('"', '""')
			self.output(f"SET SESSION AUTHORIZATION \"{user}\";")

		if db:
			db = db.replace('"', '""')
			self.output(f"\c \"{db}\"")

		self.output(query + ";")

		if user:
			self.output("RESET SESSION AUTHORIZATION;")

		self.output(f"-- END: run query on {dbLabel}")

class MySQL_Wrapper(DBWrapper):

	def __init__(self):
		super().__init__([ "mysql", "mariadb" ], "mysql")
		self.userRegex = re.compile("^([^@]+)(?:@([^@]+))?$")

	def __quoteUser(self, user):
		m = self.userRegex.match(user)
		if not m:
			fail(f"The user spec [{user}] is not valid")
		u = m.group(1)
		u = u.replace("'", "''")

		h = m.group(2)
		if not h:
			h = "%"

		return f"'{u}'@'{h}'"

	def renderAdminPassword(self, adminSpec):
		if "password" not in adminSpec:
			return
		password = getSecretPassword(adminSpec["password"])
		self.output("")
		self.output(f"-- BEGIN: set the root password to [{password}]")
		self.output(f"ALTER USER IF EXISTS 'root'@'%' IDENTIFIED BY '{password}';")
		self.output(f"ALTER USER IF EXISTS 'root'@'localhost' IDENTIFIED BY '{password}';")
		self.output("FLUSH PRIVILEGES;")
		self.output(f"-- END: set the root password")

	def renderUserSQL(self, userName, userSpec):
		hosts = []
		if KEY_USER_HOSTS in userSpec:
			hosts = userSpec[KEY_USER_HOSTS]
			if type(hosts) != list:
				fail(f"The '{KEY_USER_HOSTS}' entries must be a list of strings")
			hosts = [str(h) for h in hosts]

		if not hosts:
			hosts = ["%"]

		if "password" in userSpec:
			password = getSecretPassword(userSpec["password"])
		else:
			password = userName

		for host in hosts:
			userName = self.__quoteUser(f"{userName}@{host}")
			self.output("")
			self.output(f"-- BEGIN: create the {userName} user")
			self.output(f"DROP USER IF EXISTS {userName};")
			self.output(f"CREATE USER {userName} IDENTIFIED BY '{password}';")
		self.output("FLUSH PRIVILEGES;")
		self.output(f"-- END: creation of {userName} user")

	def renderDatabaseSQL(self, dbName, dbSpec):
		self.output("")
		self.output(f"-- BEGIN: create the {dbName} database")
		dbName = dbName.replace("'", "''")
		self.output(f"DROP DATABASE IF EXISTS '{dbName}';")

		charsetSpec = ""
		if KEY_DB_CHARSET in dbSpec:
			charsetSpec = dbSpec[KEY_DB_CHARSET]
		if charsetSpec:
			charsetSpec = f"CHARACTER SET {charsetSpec}"

		collateSpec = ""
		if KEY_DB_COLLATE in dbSpec:
			collateSpec = dbSpec[KEY_DB_COLLATE]
		if collateSpec:
			collateSpec = f"COLLATE {collateSpec}"

		commentSpec = ""
		if KEY_DB_COMMENT in dbSpec:
			commentSpec = dbSpec[KEY_DB_COMMENT]
		if commentSpec:
			commentSpec = commentSpec.replace("'", "''")
			collateSpec = f"COMMENT '{commentSpec}'"

		self.output(f"CREATE DATABASE '{dbName}' {charsetSpec} {collateSpec} {commentSpec};")

		if KEY_DB_PRIVILEGES in dbSpec:
			privileges = dbSpec[KEY_DB_PRIVILEGES]
			if privileges:
				for u, p in privileges.items():
					u = self.__quoteUser(str(u))
					self.output("GRANT")
					comma = ","
					# Take a shortcut
					if "*" in p:
						p = ["ALL"]
					i = 0
					m = len(p)
					for pv in p:
						i += 1
						if (i >= m):
							comma = ""
						self.output(f"\t{pv}{comma}")
					self.output(f"ON '{dbName}'.* TO {u};")
				self.output("FLUSH PRIVILEGES;")
		self.output(f"-- END: creation of the database {dbName}")

	def renderDatabaseSchemaSQL(self, dbName, schemaName, schemaSpec):
		self.output("-- schemas aren't supported in MySQL/MariaDB")

	def renderQuerySQL(self, db, user, query):
		dbLabel = db
		if not db:
			dbLabel = "<current-database>"
		self.output(f"-- BEGIN: run query on {dbLabel}")

		if db:
			db = db.replace("'", "''")
			self.output(f"USE '{db}';")
		self.output(query + ";")
		self.output(f"-- END: run query on {dbLabel}")

def getSecretPassword(spec, fallback = "12345"):
	if spec is None:
		return fallback

	if type(spec) == str:
		return spec

	if type(spec) == dict:
		if not (KEY_SECRET_KEY in spec):
			fail(f"No '{KEY_SECRET_KEY}' was given to pull the password from")
		secret = f"{INIT_DB_SECRETS}/{spec[KEY_SECRET_KEY]}"
		if (not os.path.exists(secret)) or (not os.path.isfile(secret)):
			fail(f"The secret '{secret}' is inaccessible")
		with open(secret, "rt") as f:
			return f.read()

def sanitizePrivileges(data, objType, objName):
	if not data:
		return {}

	if type(data) == str:
		# If it's a string, that's the user that owns it
		return { data : [ "*" ] }

	if type(data) == list:
		privileges = {}
		for d in data:
			privileges[str(d)] = [ "*" ]
		return privileges

	if type(data) != dict:
		fail(f"The database data for {objType} {objName} is of an unsupported type: {type(data)}")

	if not KEY_DB_PRIVILEGES in data:
		return {}

	privileges = data[KEY_DB_PRIVILEGES]

	if not privileges:
		return {}

	if type(privileges) == str:
		return { privileges : [ "*" ] }

	if type(privileges) == list:
		newPrivileges = {}
		for p in privileges:
			newPrivileges[str(p)] = [ "*" ]
		return newPrivileges

	if type(privileges) == dict:
		newPrivileges = {}
		for u, p in privileges.items():
			u = str(u)
			if not p:
				continue
			if type(p) == str:
				newPrivileges[u] = [ p ]
			elif type(p) == list:
				newPrivileges[u] = [str(v) for v in p]
			else:
				fail(f"The privileges value for {objType} {objName}, user {u} is of an unsupported type: {type(p)}")
		return newPrivileges

	fail(f"The privileges object for {objType} {objName} is of an unsupported type: {type(privileges)}")

dbType = INIT_DB_TYPE.lower()
MAPPERS = {
	"mariadb" : MySQL_Wrapper,
	"mysql" : MySQL_Wrapper,
	"postgresql" : PSQL_Wrapper,
	"postgres" : PSQL_Wrapper,
	"psql" : PSQL_Wrapper
}

if dbType not in MAPPERS:
	fail(f"Database of type [{INIT_DB_TYPE}] is not supported")

show_data = True
if source_file_is_file:
	logging.info(f"Loading the configuration from the file [{source_file}]...")
	with open(source_file, "r") as f:
		data = yaml.safe_load(f)
else:
	if type(source_file) == str:
		logging.info(f"Parsing the configuration from the string: [\n{source_file}\n]...")
		show_data = False
	else:
		logging.info("Parsing the configuration from stdin...")
	data = yaml.safe_load(source_file)

if data is None:
	fail("Data is not in YAML format")


################################################################################
# BEGIN THE ACTUAL WORK                                                        #
################################################################################

logging.info(f"Rendering the script for {INIT_DB_TYPE}...")
dbwrapperType = MAPPERS[dbType]
scriptPath = None
adminPassword = ""
with dbwrapperType() as dbwrapper:
	adminUsername = dbwrapper.getAdminUsername()
	dbType = dbwrapper.getName()
	logging.info(f"The database type is actually {dbType}...")

	if INIT_DB_SHELL:
		scriptPath = dbwrapper.getPath()

		scriptSource = f"{INIT_DB_SHELL_SOURCES}/{dbType}.sh"
		if (not os.path.exists(scriptSource)) or (not os.path.isfile(scriptSource)):
			fail(f"A shellscript was requested, but there is no template for {dbType} ({scriptSource}), can't continue")

	if "admin" in data:
		admin = data["admin"]
		if type(admin) == str:
			admin = { "password" : admin }
		elif type(admin) != dict:
			fail("The 'admin' section must either be a string or a map")
		dbwrapper.renderAdminPassword(admin)
		if "password" in admin:
			adminPassword = getSecretPassword(admin["password"])

	if "users" in data:
		users = data["users"]
		if type(users) == list:
			newUsers = {}
			for u in users:
				u = str(u)
				newUsers[u] = { "password" : u }
			users = newUsers
		elif type(users) != dict:
			users = str(users)
			users = { users.strip() : { "password" : users } }
		for userName, userData in data["users"].items():
			dbwrapper.renderUserSQL(userName, userData)

	if "databases" in data:
		for db, dbData in data["databases"].items():
			if type(dbData) == str:
				# If it's a string, that's the user that owns it
				dbData = { KEY_DB_PRIVILEGES : { dbData : [ "*" ] } }
			elif type(dbData) == list:
				privileges = {}
				for d in dbData:
					privileges[str(d)] = [ "*" ]
				dbData = { KEY_DB_PRIVILEGES : privileges }
			elif type(dbData) == dict:
				pass
			elif not dbData:
				dbData = {}
			else:
				fail(f"The database data for {db} is of an unsupported type: {type(dbData)}")

			dbData[KEY_DB_PRIVILEGES] = sanitizePrivileges(dbData, "database", db)
			dbSpec = dbData.copy()
			try:
				dbSpec.pop("schemas")
			except KeyError:
				# Ignore if this doesn't exist
				pass
			dbwrapper.renderDatabaseSQL(db, dbSpec)

			if "schemas" in dbData:
				for schema, schemaSpec in dbData["schemas"].items():
					if type(schemaSpec) == str:
						schemaSpec = { KEY_DB_PRIVILEGES : { schemaSpec : [ "*" ] } }
					elif type(schemaSpec) == list:
						privileges = {}
						for s in schemaSpec:
							privileges[str(s)] = [ "*" ]
						schemaSpec = { KEY_DB_PRIVILEGES : privileges }
					elif type(schemaSpec) == dict:
						pass
					elif not schemaSpec:
						schemaSpec = {}
					else:
						fail(f"The database schema data for {db}.{schema} is of an unsupported type: {type(schemaSpec)}")

					schemaSpec[KEY_DB_PRIVILEGES] = sanitizePrivileges(schemaSpec, "schema", f"{db}.{schema}")
					dbwrapper.renderDatabaseSchemaSQL(db, schema, schemaSpec)

	if "scripts" in data:
		scripts = data["scripts"]
		if not scripts:
			scripts = []
		elif type(scripts) == dict:
			scripts = scripts.values()
		elif type(scripts) != list:
			fail(f"The 'scripts' data structure must be a list or a map")

		for script in scripts:
			if not script:
				continue
			elif type(script) == str:
				script = { "query" : script }

			if "onlyFor" in script:
				onlyFor = script["onlyFor"]
				if type(onlyFor) == str:
					onlyFor = [ onlyFor ]
				elif type(onlyFor) == list:
					onlyFor = [str(v) for v in onlyFor]
				elif onlyFor:
					fail(f"The 'onlyFor' declaration for script # {p} is invalid ({type(onlyFor)})")
				if onlyFor and (not dbwrapper.isCompatible(onlyFor)):
					continue

			query = None
			if "query" in script:
				source = script["query"]
				sourceType = "inline"
				query = script["query"]
			else:
				source = None
				sourceType = None
				stream = None
				try:
					if "file" in script:
						source = script["file"]
						sourceType = "file"
						with open(script["file"], "rt") as s:
							query = s.read();
					elif "url" in script:
						source = script["url"]
						sourceType = "url"
						encoding = "utf-8"
						if ("encoding" in script) and (script["encoding"]):
							encoding = str(script["encoding"])
						with urllib.request.urlopen(script["url"]) as u:
							query = u.read().decode(encoding)
				except Exception as e:
					fail(f"The {sourceType} [{source}] could not be read for use as a SQL script, aborting!\n{traceback.format_exc()}")

			if query is None:
				logging.warning("Found a script entry which lacks a query/file/url specification, skipping!")
				continue

			db = None
			if "db" in script:
				db = str(script["db"])

			user = None
			if "user" in script:
				user = str(script["user"])

			dbwrapper.renderQuerySQL(db, user, query)

if INIT_DB_SHELL and scriptPath:
	# Render/copy the script
	# For safety, the admin password is given base64-encoded
	if adminPassword:
		adminPassword = adminPassword.encode("utf-8")
		adminPassword = base64.b64encode(adminPassword)
		adminPassword = adminPassword.decode("ascii")

	# Copy the DB-specific script as dbinit.runner
	scriptTarget = f"{INIT_DB_STORE}/{TARGET_SCRIPT_NAME}"
	logging.info(f"Copying the template script from [{scriptSource}] into [{scriptTarget}]")
	shutil.copyfile(scriptSource, scriptTarget)
	# Make the script executable, just in case
	os.chmod(scriptTarget, 0o755)

	# Render this out to the /dbinit directory
	content = f"""\
#!/bin/bash
SCRIPT="$(readlink -f "${{BASH_SOURCE:-${0}}}")"
BASEDIR="$(dirname "${{SCRIPT}}")"
cd "${{BASEDIR}}"
source "./{TARGET_SCRIPT_NAME}" "{os.path.basename(scriptPath)}" {adminUsername} {adminPassword}\
"""

	logging.info("Rendering the initializer script...")
	renderedScript = f"{INIT_DB_STORE}/000-dbinit.sh"
	with open(renderedScript, "wt") as script:
		script.write(content)
	# Make the script executable, just in case
	os.chmod(renderedScript, 0o755)

# TA-DAAAA!! We're done... now let the original container's startup script do its thing ...
exit(0)
